# Ziel von meiner Aufgabe

TALKING HEAD JULIA
Ich möchte eine Software bauen, die Badeseen nach ihrer Qualität auswertet.
Meine Kriterien eines guten Badesees sind:
- genug grüne Umgebung
- gute Anbindung an Öffis
- weit weg von Straßenlärm
- gutes Ufer um ins Wasser zu gehen
Ich möchte eine Ablage für meinen Code haben, die ich auch von anderen Rechnern aus erreichen kann. Ausserdem möchte ich, dass mein Quellcode auch in einer Cloud gespeichert wird, falls mein Rechner kaputt geht. Für dieses Problem hat sich in den letzten Jahren GIT als Standard etabliert, also verwende ich auch GIT.

Architekturfolie: Julia zeigt in DrawIO ein Kästchen mit Funktion 1 und was Funktion 1 macht. Dann zeigt sie ein Kästchen mit Funktion 2 und was Funktion 2 macht. Kästchen 1 ist mit Kästchen 2 durch einen Pfeil verbunden.

FOLIE
Mein Projekt ist am Anfang und noch sehr rudimentär und enthält nur eine Funktion, die eine Excel Datei mit gespeicherten Werten einliest und auswertet. Damit dieser funktionierende Quellcode nicht verloren geht, speichere ich ihn in Git. Am nächsten Tag entwickle ich Funktion 2, die die Auswertung im Browser graphisch anzeigt. Auch diesen funktionieren Quellcode speichere ich in Git. So kann ich immer auf den letzten funktionierenden Stand zurückgreifen, falls ich einen Fehler bei der weiteren Entwicklung mache.

# Commit

Jetzt wird der Begriff "Commit" eingeführt. Abbildung von Git Commits.

FOLIE
Ein Commit ist ein Zustand des Quellcodes zu einem bestimmten Zeitpunkt. Immer wenn ich Code in Git speichere, erzeuge ich damit einen neuen Commit. Typischerweise wenn ich eine Funktion entwickelt habe, die funktioniert, dann mache ich einen Commit. Ich kann zwischen den Zuständen meines Projektes hin und her springen, in der Historie meines Projektes so zu sagen, und kann sehen, wie sich mein Projekt entwickelt hat. So kann ich immer auf einen beliebigen funktionierenden Stand zurückgreifen, falls ich einen Fehler bei der weiteren Entwicklung mache. Die verschiedenen Zustände meines Projektes sind in Git in einer Art linearen Struktur gespeichert, die die zeitliche Abfolge meines Projektes abbildet. Jeder erfasste Zustand meines Projektes ist ein Commit. Die verschiedenen Commits bilden eine Commit Historie. Zusätzlich kann mir den Unterschied zwischen zwei beliebigen Commits anzeigen lassen.

Julia zeigt, wie sie einen Projektordner "badeseen" anlegt für ihre kompletten Quellcode und wie sie diesen Ordner in Git hinzufügt. Julia erstellt einen Commit in VSC indem sie Dateien zum Commit added und einen Kommentar hinzufügt. Julia zeigt die Commit Historie in VSC (Source Control Graph in VSC).

SCREENCAST
Ich erstelle einen Ordner für den Quellcode meines Projekts. Dieser Ordner enthält mehrere Unterordner mit Dateien, die typischerweise während der Entwicklung erstellt werden. Ich kann bestimmen, welche Dateien in Git aufgenommen werden und welche nicht. Jedes Mal, wenn ich einen neuen Commit erstelle, werden meine Änderungen in Git gespeichert. Ein Commit enthält den kompletten Stand aller Dateien in meinem Projekt. Ich kann in einem Commit einen Kommentar hinterlassen, der beschreibt, was ich in diesem Commit gemacht habe. So kann ich später nachvollziehen, was ich in einem bestimmten Commit gemacht habe. Zusätzlich werden Zeitstempel und Autor des Commits gespeichert.

---

# Einführung
- Projektvorstellung Badeseen

# Mit Git alleine arbeiten
- Projekt anlegen + erste Funktion bauen und live stellen
- Git Repository (remote und lokal)
- Commit
- Branches (develop und master)
- Git Merge
- Basisfunktionen von Git

# Git im Team (Git Flow)
- Problem 1:
    - unterschiedliche Entwickler arbeiten an unterschiedlichen Features
  Lösung 1:
    - Feature Branches
- Problem 2:
    - Software wird released
  Lösung 2:
    - Release Branch
- Problem 3:
    - Software hat ein Bug nach Release auf Produktion
  Lösung 3:
    - Hotfix Branch

# Release Engineering
- Stagekonzept 
  - develop
    - dev (für Entwickler) -> develop Branch
    - test (für Tester) -> release Branch (Version 2.0.5 -> Git Tag)
  - UAT (user acceptence test)
    - mit unterschriebener Abnahmeerklärung Kunde/PO
  - PROD
- Versionierung anhand unseres Beispielprojektes erklären
  - Version 2.0.5 (1 Zahl: Major, 2 Zahl: Minor, 3 Zahl: Patch)
  - Semantic Versioning https://semver.org/
- CHANGELOG.md und semantic git commits https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716


# Infrastruktur
  - Infrastruktur as a Code (Bestandteile einer Infrastruktur) werden z.B. in yaml Dateien gespeichert und in einem extra Git Repository abgelegt) -> Terraform, GitOps
  - Git Repository für Infrastruktur 
  - Hintergrundprozess der dieses Git Repository ausliest und die Infrastruktur aufbaut
  - Gedanken: zwei Repositories in GitHub aufbauen (ein Repository für den Quellcode und ein Repository für die Infrastruktur)
  - zusätzlich: in Miro ein Diagramm erstellen für Infrastructure as a Code


